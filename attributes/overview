An attribute is metadata applied to some module, crate, or item. This metadata
can be used to/for: - conditional compilation of code
[url]https://doc.rust-lang.org/stable/rust-by-example/attribute/cfg.html[/url]
- set crate name, version, and type (binary or
library)[url]https://doc.rust-lang.org/stable/rust-by-example/attribute/crate.html[/url]
- disable lints (warnings)
[url]https://en.wikipedia.org/wiki/Lint_%28software%29[/url] - enable compiler
features (macros, glob imports, etc.) - link to a foreign library - mark
functions as unit tests - mark functions that will be part of a benchmark -
attribute like macros
[url]https://doc.rust-lang.org/book/ch19-06-macros.html#attribute-like-macros[/url]

When attributes apply to a whole crate, their syntax is `#![crate_attribute]`,
and when they apply to a module or item, the syntax is `#[item_attribute]`
(note the absence of a bang `!`, which assumedly notates application to an
entire crate syntactically).

Attributes can take arguments with different syntaxes: - `#[attribute =
"value"]` - `#[attribute(key = "value")]` - `#[attribute(value)]`

Attributes can have multiple values and can be separated over multiple lines,
too:

BEGIN CODEBLOCK 
#[attribute(value, value2)]

#[attribute(value, value2, value3, value4, value5)]
END CODEBLOCK
